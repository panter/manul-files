{"version":3,"sources":["../src/upload_client.js"],"names":["RESIZABLE_MIME_TYPES","UploadClientService","Slingshot","Directives","options","resizeQuality","onAfterUpload","directiveName","size","type","fileRestrictions","maxSize","maxDimension","resizeToMaxDimension","quality","metaContext","uploader","Upload","superSend","send","upload","file","callback","callbackWithTracking","error","url","shouldResize","resizeOptions","getResizeOptions","fileResized"],"mappings":";;;;;;;;;;;;;;;;;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,uBAAuB,CAAC,YAAD,EAAe,WAAf,EAA4B,WAA5B,CAA7B;;IAEqBC,mB;AAEnB,qCAGG;AAAA,QAHWC,SAGX,QAHWA,SAGX;AAAA,QAHsBC,UAGtB,QAHsBA,UAGtB;AAAA,QAHoCC,OAGpC,uEAH8C;AAC/CC,qBAAe,GADgC;AAE/CC;AAF+C,KAG9C;;AAAA;;AACD,SAAKJ,SAAL,GAAiBA,SAAjB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,0CAAqB,EAAEF,oBAAF,EAAaC,sBAAb,EAArB;AACD;;;;iCAEYI,a,SAA+B;AAAA,UAAdC,IAAc,SAAdA,IAAc;AAAA,UAARC,IAAQ,SAARA,IAAQ;AAAA,UAClCC,gBADkC,GACb,KAAKP,UAAL,CAAgBI,aAAhB,CADa,CAClCG,gBADkC;;AAE1C,UAAI,CAACA,iBAAiBC,OAAlB,IAA6BD,iBAAiBC,OAAjB,IAA4BH,IAA7D,EAAmE;AACjE,eAAO,KAAP;AACD;AACD,UAAI,wBAAWR,oBAAX,EAAiCS,IAAjC,CAAJ,EAA4C;AAC1C,eAAO,IAAP;AACD;AACD,aAAO,KAAP;AACD;;;qCAEgBF,a,EAAe;AAAA,UACtBG,gBADsB,GACD,KAAKP,UAAL,CAAgBI,aAAhB,CADC,CACtBG,gBADsB;;AAE9B,aAAO;AACLE,sBAAcF,iBAAiBG,oBAD1B;AAELC,iBAAS,KAAKV,OAAL,CAAaC;AAFjB,OAAP;AAID;;;mCAEcE,a,EAAeQ,W,EAAa;AAAA;;AACzC,UAAMC,WAAW,IAAI,KAAKd,SAAL,CAAee,MAAnB,CAA0BV,aAA1B,EAAyCQ,WAAzC,CAAjB;;AAEA;AACA,UAAMG,YAAYF,SAASG,IAA3B;AACA,UAAMC,SAAS,SAATA,MAAS,CAACC,IAAD,EAAOC,QAAP,EAAoB;AACjC,YAAMC,uBAAuB,SAAvBA,oBAAuB,CAACC,KAAD,EAAQC,GAAR,EAAgB;AAC3C,cAAI,0BAAa,MAAKrB,OAAL,CAAaE,aAA1B,CAAJ,EAA8C;AAC5C,kBAAKF,OAAL,CAAaE,aAAb,CAA2BkB,KAA3B,EAAkC,EAAEC,QAAF,EAAOJ,UAAP,EAAad,4BAAb,EAAlC;AACD;AACDe,mBAASE,KAAT,EAAgBC,GAAhB;AACD,SALD;;AAOAP,kBAAUG,IAAV,EAAgBE,oBAAhB;AACD,OATD;;AAWAP,eAASG,IAAT,GAAgB,UAACE,IAAD,EAAOC,QAAP,EAAoB;AAClC;AACA,YAAI,MAAKI,YAAL,CAAkBnB,aAAlB,EAAiCc,IAAjC,CAAJ,EAA4C;AAC1C,cAAMM,gBAAgB,MAAKC,gBAAL,CAAsBrB,aAAtB,CAAtB;AACA,gCAAOc,IAAP,EAAaM,aAAb,EAA4B,UAACH,KAAD,EAAQK,WAAR,EAAwB;AAClD,gBAAI,CAACL,KAAL,EAAY;AACVJ,qBAAOS,WAAP,EAAoBP,QAApB;AACD,aAFD,MAEO;AACLA,uBAASE,KAAT;AACD;AACF,WAND;AAOD,SATD,MASO;AACLJ,iBAAOC,IAAP,EAAaC,QAAb;AACD;AACF,OAdD;AAeA,aAAON,QAAP;AACD;;;;;;kBA/DkBf,mB","file":"upload_client.js","sourcesContent":["import _ from 'lodash';\nimport initUploadDirectives from './init_upload_directives';\nimport resize from './resize';\n\nconst RESIZABLE_MIME_TYPES = ['image/jpeg', 'image/png', 'image/gif'];\n\nexport default class UploadClientService {\n\n  constructor({ Slingshot, Directives }, options = {\n    resizeQuality: 0.6,\n    onAfterUpload: _.noop,\n  }) {\n    this.Slingshot = Slingshot;\n    this.Directives = Directives;\n    this.options = options;\n    initUploadDirectives({ Slingshot, Directives });\n  }\n\n  shouldResize(directiveName, { size, type }) {\n    const { fileRestrictions } = this.Directives[directiveName];\n    if (!fileRestrictions.maxSize || fileRestrictions.maxSize >= size) {\n      return false;\n    }\n    if (_.includes(RESIZABLE_MIME_TYPES, type)) {\n      return true;\n    }\n    return false;\n  }\n\n  getResizeOptions(directiveName) {\n    const { fileRestrictions } = this.Directives[directiveName];\n    return {\n      maxDimension: fileRestrictions.resizeToMaxDimension,\n      quality: this.options.resizeQuality,\n    };\n  }\n\n  createUploader(directiveName, metaContext) {\n    const uploader = new this.Slingshot.Upload(directiveName, metaContext);\n\n    // can't extend properly with classes :-(\n    const superSend = uploader.send;\n    const upload = (file, callback) => {\n      const callbackWithTracking = (error, url) => {\n        if (_.isFunction(this.options.onAfterUpload)) {\n          this.options.onAfterUpload(error, { url, file, directiveName });\n        }\n        callback(error, url);\n      };\n\n      superSend(file, callbackWithTracking);\n    };\n\n    uploader.send = (file, callback) => {\n      // resize if too large\n      if (this.shouldResize(directiveName, file)) {\n        const resizeOptions = this.getResizeOptions(directiveName);\n        resize(file, resizeOptions, (error, fileResized) => {\n          if (!error) {\n            upload(fileResized, callback);\n          } else {\n            callback(error);\n          }\n        });\n      } else {\n        upload(file, callback);\n      }\n    };\n    return uploader;\n  }\n}\n"]}